{
    "version": "https://jsonfeed.org/version/1",
    "title": "只想摆烂，阿巴阿巴阿巴",
    "subtitle": "",
    "icon": "https://zhiyuan-porg.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://zhiyuan-porg.github.io",
    "items": [
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/24/Listener%E3%80%81Ajax%E3%80%81JSON/",
            "url": "https://zhiyuan-porg.github.io/2024/07/24/Listener%E3%80%81Ajax%E3%80%81JSON/",
            "title": "",
            "date_published": "2024-07-24T09:26:49.927Z",
            "content_html": "<hr />\n<h2 id=\"titlelistener-and-ajax-and-json\"><a class=\"anchor\" href=\"#titlelistener-and-ajax-and-json\">#</a> title:Listener And AJAX AND JSON</h2>\n<h1 id=\"listener-ajax-json\"><a class=\"anchor\" href=\"#listener-ajax-json\">#</a> Listener、Ajax、JSON</h1>\n<h2 id=\"1-listener监听器\"><a class=\"anchor\" href=\"#1-listener监听器\">#</a> 1. Listener 监听器</h2>\n<p>​\t\t在 JavaWeb 中的监听器分为三大类（监听的对象）、八大种（监听的属性）。</p>\n<p><strong>三大类：</strong> 监听域对象（域对象的生命周期）、监听属性（值的变化）、 监听 Session 的状态</p>\n<p><strong>（1）监听域对象</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象类型</th>\n<th style=\"text-align:center\">监听器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ServletContext</td>\n<td style=\"text-align:center\">ServletContextListener</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HttpSession</td>\n<td style=\"text-align:center\">HttpSessionListener</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HttpServletRequest</td>\n<td style=\"text-align:center\">ServletRequestListener</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Warning：</strong></p>\n<p>​\t\t在使用 HttpSessionListener 监听器或 ServletRequestListener 监听器时，如果是直接关闭服务器来销毁这二者时，并不会触发相应的 Destroyed 方法。（这里有一个很俗的例子，将监听器比作一位工作者，服务器关闭时可以看成是下班，那都下班了还管 der）</p>\n</blockquote>\n<p><strong>（2）监听属性变化</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对象类型</th>\n<th style=\"text-align:center\">监听器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ServletContext</td>\n<td style=\"text-align:center\">ServletContextAttributeListener</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HttpSession</td>\n<td style=\"text-align:center\">HttpSessionAttributeListener</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HttpServletRequest</td>\n<td style=\"text-align:center\">ServletRequestAttributeListener (监听移除)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Warning:</strong> 在监听属性的变化时不仅仅是监听值的替换操作，还有添加和移除操作。</p>\n</blockquote>\n<p><strong>（3）监听 Session 对象的状态</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">监听器</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">HttpSessionBindingListener</td>\n<td style=\"text-align:center\">监听 HttpSession 的绑定与解绑</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HttpSessionActivationListener</td>\n<td style=\"text-align:center\">监听 HttpSession 的钝化与活化</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2ajax\"><a class=\"anchor\" href=\"#2ajax\">#</a> 2.AJAX</h2>\n<p>​\t\tAJAX（Asynchronous Javascript And XML， 异步 JavaScript 和 XML），一种创建交互式网页应用的网页开发技术。实现了异步请求的功能，即可以在不刷新网页的情况下重新渲染页面的内容。在经过长久的发展之后，AJAX 也有比较完善的封装，下文就以 JQuery 框架下的 AJAX 为进行说明。</p>\n<p>​\t\t在 JQuery 框架下的 AJAX 中主要有 GET、POST、AJAX 三种请求方式。如下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">请求方式</th>\n<th style=\"text-align:center\">语法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">GET 请求</td>\n<td style=\"text-align:center\">$.get(url, <em>[data]</em>, <em>[callback]</em>, <em>[type]</em>)</td>\n<td style=\"text-align:center\">简单的 get 请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POST 请求</td>\n<td style=\"text-align:center\">$.post(url, <em>[data]</em>, <em>[callback]</em>, <em>[type]</em>)</td>\n<td style=\"text-align:center\">简单的 post 请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AJAX 请求</td>\n<td style=\"text-align:center\">$.ajax([settings])</td>\n<td style=\"text-align:center\">复杂的 ajax 请求（可以设更多的参数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GET 请求</td>\n<td style=\"text-align:center\">$.get([settings])</td>\n<td style=\"text-align:center\">复杂的 get 请求（可以设更多的参数）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">POST 请求</td>\n<td style=\"text-align:center\">$.post([settings])</td>\n<td style=\"text-align:center\">复杂的 post 请求（可以设更多的参数）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"21get\"><a class=\"anchor\" href=\"#21get\">#</a> 2.1.GET</h3>\n<h3 id=\"22post\"><a class=\"anchor\" href=\"#22post\">#</a> 2.2.POST</h3>\n<h3 id=\"23ajax\"><a class=\"anchor\" href=\"#23ajax\">#</a> 2.3.AJAX</h3>\n<p>​</p>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/24/Filter/",
            "url": "https://zhiyuan-porg.github.io/2024/07/24/Filter/",
            "title": "Filter",
            "date_published": "2024-07-24T02:27:12.255Z",
            "content_html": "<h1 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> Filter</h1>\n<h2 id=\"1-过滤器简介\"><a class=\"anchor\" href=\"#1-过滤器简介\">#</a> 1. 过滤器简介</h2>\n<h3 id=\"11-filter概述\"><a class=\"anchor\" href=\"#11-filter概述\">#</a> 1.1. Filter 概述</h3>\n<p>​\tFilter 被称为过滤器，是一段可复用的代码，可以在请求的之前或之后执行。这意味着 Filter 可以管理多个 Web 资源，即在请求的 Web 资源时会先经过过滤器，此时可以进行一些操作（如权限访问控制、过滤敏感词汇等等），而且在访问过 Web 资源后对客户端进行响应时也会经过过滤器，当然，这也可以进行管理操作。</p>\n<p>​\t话不多说，上图</p>\n<p><img loading=\"lazy\" data-src=\"https://sanyueqi.cn-gd.ufileos.com/blogContentImgs/Filter_01.png\" alt=\"image-20240724105513406\" /></p>\n<h3 id=\"12-filter的使用\"><a class=\"anchor\" href=\"#12-filter的使用\">#</a> 1.2. Filter 的使用</h3>\n<h4 id=\"121-filter的生命周期\"><a class=\"anchor\" href=\"#121-filter的生命周期\">#</a> 1.2.1. Filter 的生命周期</h4>\n<p>​\tFilter 的生命周期有创建和销毁。其中，创建的时机是在<strong>服务器启动</strong>时，而且在整个服务器运行期间<strong>只会创建一次</strong> Filter 实例； 而销毁的时机是在<strong>服务器关闭</strong>时。</p>\n<blockquote>\n<p>Filter 生命周期的相关方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用 and 次数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">void init()</td>\n<td style=\"text-align:center\">初始化，在服务器启动就加载，执行 1 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void doFilter()</td>\n<td style=\"text-align:center\">拦截到请求之后执行的核心逻辑方法，执行 N 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void destroy()</td>\n<td style=\"text-align:center\">销毁，在服务器关闭时，执行 1 次</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>​\t<strong>样例</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义了拦截规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 拦截规则有三种：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//\t精确匹配 （e.g./user、/user.jsp）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//\t目录匹配 （e.g./user/* 、 /emp/*）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  后缀匹配 （e.g. *action 、 *.html 、*.jsp）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">DemoCase</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> init <span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 核心逻辑</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> dofilter <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 放行前的管理操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 如果符合条件，则放行请求到下一个过滤器（如果还有的话） or Web 资源 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">dofilter</span><span class=\"token punctuation\">(</span>servletRequest<span class=\"token punctuation\">,</span> servletResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 放行后的管理操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> destroy <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><strong>warning：</strong></p>\n<p>在拦截规则中，目录匹配不可用和后缀匹配一起使用。 e . g .  /aaa/*.action , /* do</p>\n</blockquote>\n<h4 id=\"122-filterconfig类\"><a class=\"anchor\" href=\"#122-filterconfig类\">#</a> 1.2.2. FilterConfig 类</h4>\n<p>​\tFilterConfig 配置类，主要用于获取 ServletContext 对象，以及一些其他的 filter 信息。</p>\n<p>​\t<strong>相关方法：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getFilterName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 获取该 Filter 的名称，默认为该 Filter 类的全路径名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">ServletContext</span> <span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 获取上下文对象（ServletContext）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">String</span> <span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> var1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 获取 Filter 的初始化参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getInitParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 获取全部 Filter 的初始化参数；</span></pre></td></tr></table></figure><h4 id=\"123-拦截方式\"><a class=\"anchor\" href=\"#123-拦截方式\">#</a> 1.2.3. 拦截方式</h4>\n<p>​\t与其说是拦截的方式，不是说是拦截的对象。开发者可以在 @WebFilter 注解中配置 dispatcherTypes 字段的值来对指定对象进行拦截。其中， 可选择的值与含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>REQUEST</td>\n<td>只拦截来自浏览器发送过来的请求</td>\n</tr>\n<tr>\n<td>FORWARD</td>\n<td>只拦截通过 RequestDispatcher.forward () 发送的请求</td>\n</tr>\n<tr>\n<td>INCLUDE</td>\n<td>只拦截通过 RequestDispatcher.include () 发送的请求</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>只拦截由于异常 / 错误触发的请求</td>\n</tr>\n<tr>\n<td>ASYNC</td>\n<td>拦截异步的 Servlet</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Tips:</strong></p>\n<p>拦截的对象默认是 REQUEST</p>\n</blockquote>\n<blockquote>\n<p><strong>Warning:</strong></p>\n<p>在拦截 ASYNC 异步的 Servlet 时，Filter 也要开启相关异步支持，并且还要加上对浏览器请求的拦截。e . g .</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@WebFilter</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/demo03\"</span><span class=\"token punctuation\">,</span>dispatcherTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">DispatcherType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUEST</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">DispatcherType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASYNC</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>asyncSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"2过滤器链\"><a class=\"anchor\" href=\"#2过滤器链\">#</a> 2. 过滤器链</h3>\n<p>​\t用户请求 Web 资源时中间经过多个过滤器，每一个过滤器完成一个具体的功能。流程如下，</p>\n<p><img loading=\"lazy\" data-src=\"https://sanyueqi.cn-gd.ufileos.com/blogContentImgs/Filter_02.png\" alt=\"image-20240724121032396\" /></p>\n<h4 id=\"21过滤器链的执行顺序\"><a class=\"anchor\" href=\"#21过滤器链的执行顺序\">#</a> 2.1. 过滤器链的执行顺序</h4>\n<p>​\t在注解方式下，过滤器链的执行难顺序是按照类名字母的在字典中的先后顺序执行的。</p>\n<p>​\t在 xml 配置文件下，过滤器链的执行顺序与配置项中的先后顺序一致</p>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/23/JSP-MVC/",
            "url": "https://zhiyuan-porg.github.io/2024/07/23/JSP-MVC/",
            "title": "JSP-MVC",
            "date_published": "2024-07-23T02:01:03.249Z",
            "content_html": "<h2 id=\"jsp-mvc\"><a class=\"anchor\" href=\"#jsp-mvc\">#</a> JSP-MVC</h2>\n<h2 id=\"1jsp\"><a class=\"anchor\" href=\"#1jsp\">#</a> 1.JSP</h2>\n<h3 id=\"11html和servelet的弊端\"><a class=\"anchor\" href=\"#11html和servelet的弊端\">#</a> 1.1.HTML 和 Servelet 的弊端</h3>\n<p>​\t<strong>HTML：</strong></p>\n<p>​\t优点：方便页面的布局及美化</p>\n<p>​\t缺点：不能制作动态内容</p>\n<p>​\t<strong>Servlet：</strong></p>\n<p>​\t优点：可以制作动态内容</p>\n<pre><code>缺点：不方便写CSS和JS代码\n</code></pre>\n<blockquote>\n<p>二者的优缺点刚好互补，两者综合起来就刚刚好是 JSP 的设计思想</p>\n</blockquote>\n<h3 id=\"12jsp简介\"><a class=\"anchor\" href=\"#12jsp简介\">#</a> 1.2.JSP 简介</h3>\n<p>​\t以 Java 作为脚本语言，部署在网络服务器上，可以根据客户端的请求内容动态生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者。另外，JSP 的标签库 JSTL 提供了类似于 Java 中的 if、switch、for 等功能，开发者可以更方便地实现条件渲染和列表渲染等操作，而且也不受跨平台的限制。</p>\n<blockquote>\n<p>**Tips：**JSP 编译器可以将 JSP 文件编译成用 Java 代码写的 Servlet，然后 Servlet 再编译生成字节码文件。JSP 本质上就是一个 Servlet，属于动态技术。</p>\n</blockquote>\n<h3 id=\"13jsp语法\"><a class=\"anchor\" href=\"#13jsp语法\">#</a> 1.3.JSP 语法</h3>\n<h4 id=\"131输出脚本\"><a class=\"anchor\" href=\"#131输出脚本\">#</a> 1.3.1. 输出脚本</h4>\n<p>​\t<strong>作用：</strong> 直接输出变量值或对表达式进行计算</p>\n<pre><code class=\"language-jsp\">&lt;%= 变量名称或表达式%&gt;  // 相当于Servlet的out.print()\n</code></pre>\n<h4 id=\"132声明\"><a class=\"anchor\" href=\"#132声明\">#</a> 1.3.2. 声明</h4>\n<pre><code>**作用：** 声明全局变量或方法\n</code></pre>\n<pre><code class=\"language-jsp\">&lt;%! 全局变量或方法 %&gt;\n</code></pre>\n<h4 id=\"133插入代码片段\"><a class=\"anchor\" href=\"#133插入代码片段\">#</a> 1.3.3. 插入代码片段</h4>\n<pre><code>**作用：** 插入Java代码\n</code></pre>\n<pre><code class=\"language-jsp\">&lt;% Java代码 %&gt; \n</code></pre>\n<h3 id=\"14jsp九大内置对象\"><a class=\"anchor\" href=\"#14jsp九大内置对象\">#</a> 1.4.JSP 九大内置对象</h3>\n<p>​\t<strong>PageContext:</strong> 页面域</p>\n<p>​\t<strong>Request：</strong> HttpServletRequest (请求域)</p>\n<p>​\t<strong>Session：</strong> 会话域</p>\n<p>​\t<strong>Application：</strong> 上下文域</p>\n<blockquote>\n<p>以上为四大域对象， 从大到小依次为 Application &gt; Session &gt; Request &gt; PageContext</p>\n<p><strong>相关的方法：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">作用域</th>\n<th style=\"text-align:center\">Java 代码</th>\n<th style=\"text-align:center\">EL 的写法</th>\n<th style=\"text-align:center\">范围大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">页面域</td>\n<td style=\"text-align:center\">&lt;% = pageContext.getAttribute (&quot;键名&quot;) %&gt;</td>\n<td style=\"text-align:center\" pageScope.键名=\"\">$</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">请求域</td>\n<td style=\"text-align:center\">&lt;% = request.getAttribute (&quot;键名&quot;) %&gt;</td>\n<td style=\"text-align:center\" requestScope.键名=\"\">$</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">会话域</td>\n<td style=\"text-align:center\">&lt;% = session.getAttribute (&quot;键名&quot;) %&gt;</td>\n<td style=\"text-align:center\" sessionScope.键名=\"\">$</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">上下文域</td>\n<td style=\"text-align:center\">&lt;% = application.getAttribute (&quot;键名&quot;) %&gt;</td>\n<td style=\"text-align:center\" applicationScope.键名=\"\">$</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">自动查找</td>\n<td style=\"text-align:center\">&lt;% = pageContext.findAttribute (&quot;键名&quot;) %&gt;</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>​\t<strong>Response：</strong> HttpServletResponse</p>\n<p>​\t<strong>Out</strong></p>\n<p>​\t<strong>Config：</strong> ServletConfig</p>\n<p>​\t<strong>Page:</strong> 当前页面的引用，就是 this</p>\n<p>​\t<strong>Exception：</strong> 封装了出现的异常， 只有在错误页面的中才会存在</p>\n<h4 id=\"141pagecontext域\"><a class=\"anchor\" href=\"#141pagecontext域\">#</a> 1.4.1PageContext 域</h4>\n<p>​\tPageContext 域是 servlet 中 4 个域对象中最后一个了，而且大小也是<strong>最小的</strong>，只在当前页面下生效，且在不同的页面下不能实现页面共享（即使是一次请求）</p>\n<p>​\t有关的方法：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">void setAttribute(String key, Object value)</td>\n<td style=\"text-align:center\">向页面域中添加键和值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object getAttribute(String key)</td>\n<td style=\"text-align:center\">从页面域中得到值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">void removeAttribute(String key)</td>\n<td style=\"text-align:center\">删除页面域中键值对</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Object findAttribute(String key)</td>\n<td style=\"text-align:center\">自动从四个作用域中去查某个键，从小到大的范围来查找，如果找到就停止。如果没有找到，返回 null，<strong>该方法是页面域独有的</strong></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"142exception对象\"><a class=\"anchor\" href=\"#142exception对象\">#</a> 1.4.2Exception 对象</h4>\n<p>​\t<strong>Exception 属于 JSP 的九大内置对象，但是只有错误页面才会生成该对象，普通的 JSP 页面不会存在 Exception 对象</strong></p>\n<blockquote>\n<p>​\t<strong>warning：</strong></p>\n<p>​\t(1) 当前页面只有设置了 <strong>isErrorPage = true</strong> 时才可以使用 exception 内置对象</p>\n<p>​\t(2) 常规页面只有八大内置对象，只有错误页面才有九大内置对象</p>\n</blockquote>\n<h2 id=\"2el表达式\"><a class=\"anchor\" href=\"#2el表达式\">#</a> 2.EL 表达式</h2>\n<p>​\t<strong>语法</strong></p>\n<pre><code class=\"language-jsp\">$&#123; 变量名或表达式&#125;\n</code></pre>\n<h3 id=\"21食用说明\"><a class=\"anchor\" href=\"#21食用说明\">#</a> 2.1. 食用说明</h3>\n<p>​\t<strong>变量名：</strong> 变量名即可以是诸如 x, y, z 这样的普通变量，也可以是 Object、List、Map、数组或者 JavaBean 等</p>\n<blockquote map[xiaoshabi]=\"\">\n<p>Tips: 键名中如果有特殊字符时，可以使用双引号或者单引号将其引起来。 e.g. $</p>\n</blockquote>\n<p>​\t<strong>表达式：</strong> EL 表达式中的表达式可以包含常规的算术表达式（ + 、 - 、* 、/ 、%）、比较表达式（ == 、 != 、&lt;、&lt;=、&gt; 、&gt;=）、逻辑表达式（&amp;&amp; 、|| 、！）、三元运算以及判空表达式（${ empty 变量名}）</p>\n<h2 id=\"3jstl标签库\"><a class=\"anchor\" href=\"#3jstl标签库\">#</a> 3.JSTL 标签库</h2>\n<p>​\t使用时先导入 jar 包</p>\n<h3 id=\"31相关标签\"><a class=\"anchor\" href=\"#31相关标签\">#</a> 3.1 相关标签</h3>\n<p>**&lt;c:if test=&quot;条件判断表达式&quot;&gt; ** 条件判断</p>\n<p><strong>&lt;c:choose&gt;</strong> 多分支判断</p>\n<blockquote>\n<p><strong>类似于 switch，层级结构为：</strong></p>\n<pre><code class=\"language-jsp\">&lt;c:choose&gt;\n    &lt;c:when test = &quot;条件表达式&quot;&gt;\n   \t \txxxxxxxx\n    &lt;/c:when&gt;\n    //默认条件，相当于default\n    &lt;c:otherwise&gt;\n        xxxxxxx\n    &lt;/c:otherwise&gt;\n&lt;/c:choose\n</code></pre>\n</blockquote>\n<p><strong>&lt;c:forEach&gt;</strong> 循环渲染</p>\n<blockquote>\n<p><strong>类似于 for 语句，相关的参数有</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">EL 支持</th>\n<th style=\"text-align:center\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">items</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">数组或集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">var</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">String</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">varStatus</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">String</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">begin</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">step</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">int</td>\n</tr>\n</tbody>\n</table>\n<p>其中<strong> varStatus</strong> 还有一些子属性（虽然也不是很常用）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">当前元素的索引号，从 0 开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">遍历到当前位置，一共遍历了多少个元素（默认从 1 开始）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">first</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">如果当前遍历的是第 1 个元素，则返回 true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">last</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">如果当前遍历的是最后 1 个元素，则返回 true</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h2 id=\"4三层架构-and-mvc\"><a class=\"anchor\" href=\"#4三层架构-and-mvc\">#</a> 4. 三层架构 And MVC</h2>\n<h3 id=\"41三层架构\"><a class=\"anchor\" href=\"#41三层架构\">#</a> 4.1. 三层架构</h3>\n<p>​\t三层架构分为控制层（Controller 层）、业务层（Service 层）、持久层（Dao 层）</p>\n<h4 id=\"411controller层表现层-web层\"><a class=\"anchor\" href=\"#411controller层表现层-web层\">#</a> 4.1.1.Controller 层（表现层、Web 层）</h4>\n<p>​\t<strong>主要完成的操作：</strong></p>\n<p>​\t（1）接收前端传递的参数</p>\n<p>​\t（2）调用业务层</p>\n<p>​\t（3）请求响应</p>\n<blockquote>\n<p>另外，还会有如下需求：</p>\n<p>数据的中转处理（进行格式化等操作）、响应类型和响应数据的格式及编码、数据压缩....</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/18/Cookie%20And%20Seeion/",
            "url": "https://zhiyuan-porg.github.io/2024/07/18/Cookie%20And%20Seeion/",
            "title": "Cookie And Session",
            "date_published": "2024-07-18T09:53:23.457Z",
            "content_html": "<h2 id=\"1cookie\"><a class=\"anchor\" href=\"#1cookie\">#</a> 1.Cookie</h2>\n<h3 id=\"11概述\"><a class=\"anchor\" href=\"#11概述\">#</a> 1.1 概述</h3>\n<h4 id=\"111协议状态\"><a class=\"anchor\" href=\"#111协议状态\">#</a> 1.1.1 协议状态</h4>\n<p>​\t<strong>分类：</strong> 有状态、无状态</p>\n<blockquote>\n<p><strong>Tips:</strong> 协议状态的划分是以是否有数据存储功能来划分的，但这并不一定是绝对的。例如 Http 协议是无状态协议，但通过一些特殊手段可以使其携带数据（加入 cookie、session 并向其中写入相应的数据，此时 Http 协议也具有了数据存储功能了）</p>\n</blockquote>\n<h4 id=\"112cookie的传递流程\"><a class=\"anchor\" href=\"#112cookie的传递流程\">#</a> 1.1.2Cookie 的传递流程</h4>\n<h3 id=\"12cookie的操作\"><a class=\"anchor\" href=\"#12cookie的操作\">#</a> 1.2Cookie 的操作</h3>\n<p>​\tcookie 的操作无非就是创建、删除、查看</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建 Cookie 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Cookie</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dashabi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 设置 Cookie 的有效时间，单位为秒。如果没有设置过期时间则 Cookie 会随着浏览器的关闭而消失；当设置了过期时间时，则失效的时间以过期时间为准</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 如果要删除此条 Cookie，则可以  user.setMaxAge (0), 表示 Cookie 的存活时间为零</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 在响应报文中添加 Cookie</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/17/Response%20And%20ServletContext/",
            "url": "https://zhiyuan-porg.github.io/2024/07/17/Response%20And%20ServletContext/",
            "title": "Response And ServletContext",
            "date_published": "2024-07-17T09:49:03.578Z",
            "content_html": "<h2 id=\"1http响应概述\"><a class=\"anchor\" href=\"#1http响应概述\">#</a> 1.Http 响应概述</h2>\n<h3 id=\"11http响应信息的组成\"><a class=\"anchor\" href=\"#11http响应信息的组成\">#</a> 1.1HTTP 响应信息的组成</h3>\n<p>响应行、响应头、响应体</p>\n<h3 id=\"12响应行\"><a class=\"anchor\" href=\"#12响应行\">#</a> 1.2 响应行</h3>\n<p>由协议及版本、响应状态码、状态信息</p>\n<blockquote>\n<p>e.g. HTTP/1.1    200    ok</p>\n</blockquote>\n<h4 id=\"121响应状态码分为五类\"><a class=\"anchor\" href=\"#121响应状态码分为五类\">#</a> <strong>1.2.1 响应状态码分为五类</strong></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1xx</td>\n<td style=\"text-align:center\">指示信息；表示请求已接收，继续处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2xx</td>\n<td style=\"text-align:center\">成功；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3xx</td>\n<td style=\"text-align:center\">重定向</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4xx</td>\n<td style=\"text-align:center\">客户端错误；语法错误 or 无法实现</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5xx</td>\n<td style=\"text-align:center\">服务端错误</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"122响应头\"><a class=\"anchor\" href=\"#122响应头\">#</a> <strong>1.2.2 响应头</strong></h4>\n<p>由各种键值组成，键固定值可变。常见的响应头如下：</p>\n<table>\n<thead>\n<tr>\n<th>响应头信息</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Location</td>\n<td>重定向要跳转的地址</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>设置数据类型及字符集</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>设置稍后跳转的延迟时间及页面路径</td>\n</tr>\n<tr>\n<td>Content-Disposition</td>\n<td>设置内容的处理方式</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>常见的状态码</strong></p>\n<p>200：正确得到响应数据</p>\n<p>302：页面重定向</p>\n<p>304：使用了本地缓存</p>\n<p>400：请求参数错误</p>\n<p>404：资源不存在</p>\n<p>405：请求的方法错误</p>\n<p>415： 无法处理的媒体格式</p>\n<p>500： 服务器内部错误</p>\n</blockquote>\n<h4 id=\"123-响应体\"><a class=\"anchor\" href=\"#123-响应体\">#</a> <strong>1.2.3 响应体</strong></h4>\n<p>封装服务器要返回的数据，而且可以是任意数据</p>\n<blockquote>\n<p>Get 请求虽然没有请求体，但它有响应体</p>\n</blockquote>\n<h2 id=\"2httpservletrequest对象\"><a class=\"anchor\" href=\"#2httpservletrequest对象\">#</a> 2.HttpServletRequest 对象</h2>\n<h3 id=\"21简介\"><a class=\"anchor\" href=\"#21简介\">#</a> 2.1 简介</h3>\n<p>​\tHttpServletReruest 是 ServletRequest 接口的子接口，代表着一个请求对象，用来封装所有从浏览器发送给服务器的数据</p>\n<h3 id=\"22请求行相关的api\"><a class=\"anchor\" href=\"#22请求行相关的api\">#</a> 2.2 请求行相关的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> <span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到请求行中协议的版本</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到项目的访问地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到客户端的 IP 地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到 servlet 的访问地址</span></pre></td></tr></table></figure><h3 id=\"23请求头相关的api\"><a class=\"anchor\" href=\"#23请求头相关的api\">#</a> 2.3 请求头相关的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> headName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过键取值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 请求头中键名字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 是否还有下一个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">E</span> <span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到某个元素，并且指针后移一位</span></pre></td></tr></table></figure><blockquote>\n<p>hasMoreElements () 可以与 nextElement () 搭配使用，例</p>\n</blockquote>\n<blockquote>\n<pre><code class=\"language-java\"></code></pre>\n</blockquote>\n<p>Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</p>\n<blockquote>\n<p>// 此时对 headerNames 进行遍历，<br />\nString name;<br />\nString value;<br />\nwhile(headerNames.hasMoreElements()){<br />\n// 获取到请求头中的所有键值对<br />\n // 指针直接指向下一行，可以理解为指针在初始时指向的是 - 1，判断下一位不为空时才指针才会下移取值<br />\n name = headerNames.nextElements ();<br />\nvalue = request.getHeader(name);<br />\n}<br />\n```</p>\n</blockquote>\n<h3 id=\"24请求参数的相关api\"><a class=\"anchor\" href=\"#24请求参数的相关api\">#</a> 2.4 请求参数的相关 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过参数名称取值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有同名参数值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有参数的键名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有参数的键值对</span></pre></td></tr></table></figure><h2 id=\"3请求相关的方法\"><a class=\"anchor\" href=\"#3请求相关的方法\">#</a> 3. 请求相关的方法</h2>\n<h3 id=\"31作用域的介绍\"><a class=\"anchor\" href=\"#31作用域的介绍\">#</a> 3.1 作用域的介绍</h3>\n<p>​\t作用域是不同的 Servlet 之间的数据共享区，存放于数据库的内存中。</p>\n<p>​\t主要分为四个：页面域（Page）、请求域（Request）、会话域（Session）、上下文域（ServletContext）</p>\n<blockquote>\n<p>数据只能在同一个请求中共享，请求结束或其它的请求不能访问其中的数据。</p>\n</blockquote>\n<h3 id=\"32相关的api\"><a class=\"anchor\" href=\"#32相关的api\">#</a> 3.2 相关的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Object</span> <span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"33请求分发的api\"><a class=\"anchor\" href=\"#33请求分发的api\">#</a> 3.3 请求分发的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将请求跳转到分发器指定的地方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 收集分发器指定的请求的响应结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4转发-and-重定向\"><a class=\"anchor\" href=\"#4转发-and-重定向\">#</a> 4. 转发 And 重定向</h2>\n<h3 id=\"41转发\"><a class=\"anchor\" href=\"#41转发\">#</a> 4.1 转发</h3>\n<p>​\t由<strong>服务器</strong>进行的页面跳转</p>\n<h4 id=\"411相关的api\"><a class=\"anchor\" href=\"#411相关的api\">#</a> <strong>4.1.1 相关的 API</strong></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"412特点\"><a class=\"anchor\" href=\"#412特点\">#</a> <strong>4.1.2 特点</strong></h4>\n<ul>\n<li>服务器的内部行为，URL 始终不变</li>\n<li>客户端只发送了一次请求</li>\n<li>请求域的数据不会失效</li>\n<li>URI 不需要添上项目名</li>\n</ul>\n<h3 id=\"42重定向\"><a class=\"anchor\" href=\"#42重定向\">#</a> 4.2 重定向</h3>\n<p>​\t<strong>客户端</strong>根据服务器反馈的信息<strong>再次请求</strong>服务器</p>\n<h4 id=\"421相关的api\"><a class=\"anchor\" href=\"#421相关的api\">#</a> <strong>4.2.1 相关的 API</strong></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"422特点\"><a class=\"anchor\" href=\"#422特点\">#</a> <strong>4.2.2 特点</strong></h4>\n<ul>\n<li>由于是再次请求，所以地址栏会发生变化</li>\n<li>客户端两次请求了数据</li>\n<li>请求域中数据丢失</li>\n<li>URL 是完整的项目名，当然也可以是外部链接</li>\n</ul>\n<blockquote>\n<p>[!TIP]</p>\n<p>如果不想丢失数据域中的信息的话，可以用转发哦</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/17/Http%E5%8D%8F%E8%AE%AE%E4%B8%8ERequest/",
            "url": "https://zhiyuan-porg.github.io/2024/07/17/Http%E5%8D%8F%E8%AE%AE%E4%B8%8ERequest/",
            "title": "Http协议与Request",
            "date_published": "2024-07-17T02:13:03.187Z",
            "content_html": "<h1 id=\"http协议与request\"><a class=\"anchor\" href=\"#http协议与request\">#</a> Http 协议与 Request</h1>\n<h3 id=\"http概述\"><a class=\"anchor\" href=\"#http概述\">#</a> Http 概述</h3>\n<h5 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h5>\n<p>HTTP（Hyper　Text　Transｆｅｒ　Ｐｒｏｔｏｃｏｌ超文本传输协议） 应用层协议，运行在ＴＣＰ传输层协议之上，作用是指定传输格式，且通信双方都要遵守。</p>\n<blockquote>\n<p>Tip：HTTP 协议的默认端口是８０哦</p>\n</blockquote>\n<h5 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h5>\n<p>由请求报文和响应报文组成；无状态协议，不记录用户访问状态。</p>\n<h5 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h5>\n<p>请求行、请求头、请求体</p>\n<p><strong>请求行：</strong>      包括请求的方式（GET、POST、PUT、DELETE 等）、地址（URL）以及协议的版本</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">POST 方式</th>\n<th style=\"text-align:center\">GET 方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地址栏</td>\n<td style=\"text-align:center\">参数不会在地址栏显示出来</td>\n<td style=\"text-align:center\">参数会拼接在请求的 URL 后面，以查询字符方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">大小</td>\n<td style=\"text-align:center\">理论上无大小限制，使用流的方式发送数据</td>\n<td style=\"text-align:center\">受浏览器限制，通常是１K</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">安全性</td>\n<td style=\"text-align:center\">在请求体中发送，参数不外显，安全性相对来说较高</td>\n<td style=\"text-align:center\">在请求行中发送，参数外显，安全性较低</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">缓存</td>\n<td style=\"text-align:center\">不使用缓存</td>\n<td style=\"text-align:center\">可能会使用缓存访问静态资源，使用时状态码是３０４</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求头：</strong></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/16/hello-world/",
            "url": "https://zhiyuan-porg.github.io/2024/07/16/hello-world/",
            "title": "Hello World",
            "date_published": "2024-07-15T16:03:55.730Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}