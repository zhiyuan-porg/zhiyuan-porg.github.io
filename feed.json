{
    "version": "https://jsonfeed.org/version/1",
    "title": "只想摆烂，阿巴阿巴阿巴",
    "subtitle": "",
    "icon": "https://zhiyuan-porg.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://zhiyuan-porg.github.io",
    "items": [
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/17/Response%20And%20ServletContext/",
            "url": "https://zhiyuan-porg.github.io/2024/07/17/Response%20And%20ServletContext/",
            "title": "Response And ServletContext",
            "date_published": "2024-07-17T09:49:03.578Z",
            "content_html": "<h1 id=\"response-and-servletcontext\"><a class=\"anchor\" href=\"#response-and-servletcontext\">#</a> Response And ServletContext</h1>\n<h2 id=\"1http响应概述\"><a class=\"anchor\" href=\"#1http响应概述\">#</a> 1.Http 响应概述</h2>\n<h3 id=\"11http响应信息的组成\"><a class=\"anchor\" href=\"#11http响应信息的组成\">#</a> 1.1HTTP 响应信息的组成</h3>\n<p>响应行、响应头、响应体</p>\n<h3 id=\"12响应行\"><a class=\"anchor\" href=\"#12响应行\">#</a> 1.2 响应行</h3>\n<p>由协议及版本、响应状态码、状态信息</p>\n<blockquote>\n<p>[!TIP]</p>\n<p>e.g. HTTP/1.1    200    ok</p>\n</blockquote>\n<h4 id=\"121响应状态码分为五类\"><a class=\"anchor\" href=\"#121响应状态码分为五类\">#</a> <strong>1.2.1 响应状态码分为五类</strong></h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1xx</td>\n<td style=\"text-align:center\">指示信息；表示请求已接收，继续处理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2xx</td>\n<td style=\"text-align:center\">成功；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3xx</td>\n<td style=\"text-align:center\">重定向</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4xx</td>\n<td style=\"text-align:center\">客户端错误；语法错误 or 无法实现</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5xx</td>\n<td style=\"text-align:center\">服务端错误</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"122响应头\"><a class=\"anchor\" href=\"#122响应头\">#</a> <strong>1.2.2 响应头</strong></h4>\n<p>由各种键值组成，键固定值可变。常见的响应头如下：</p>\n<table>\n<thead>\n<tr>\n<th>响应头信息</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Location</td>\n<td>重定向要跳转的地址</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>设置数据类型及字符集</td>\n</tr>\n<tr>\n<td>Refresh</td>\n<td>设置稍后跳转的延迟时间及页面路径</td>\n</tr>\n<tr>\n<td>Content-Disposition</td>\n<td>设置内容的处理方式</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>[!NOTE]</p>\n<p><strong>常见的状态码</strong></p>\n<p>200：正确得到响应数据</p>\n<p>302：页面重定向</p>\n<p>304：使用了本地缓存</p>\n<p>400：请求参数错误</p>\n<p>404：资源不存在</p>\n<p>405：请求的方法错误</p>\n<p>415： 无法处理的媒体格式</p>\n<p>500： 服务器内部错误</p>\n</blockquote>\n<h4 id=\"123-响应体\"><a class=\"anchor\" href=\"#123-响应体\">#</a> <strong>1.2.3 响应体</strong></h4>\n<p>封装服务器要返回的数据，而且可以是任意数据</p>\n<blockquote>\n<p>&gt; [!CAUTION]<br />\n    &gt;<br />\n    &gt; Get 请求虽然没有请求体，但它有响应体</p>\n</blockquote>\n<h2 id=\"2httpservletrequest对象\"><a class=\"anchor\" href=\"#2httpservletrequest对象\">#</a> 2.HttpServletRequest 对象</h2>\n<h3 id=\"21简介\"><a class=\"anchor\" href=\"#21简介\">#</a> 2.1 简介</h3>\n<p>​\tHttpServletReruest 是 ServletRequest 接口的子接口，代表着一个请求对象，用来封装所有从浏览器发送给服务器的数据</p>\n<h3 id=\"22请求行相关的api\"><a class=\"anchor\" href=\"#22请求行相关的api\">#</a> 2.2 请求行相关的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">StringBuffer</span> <span class=\"token function\">getRequestURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到请求行中协议的版本</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到项目的访问地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到客户端的 IP 地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到 servlet 的访问地址</span></pre></td></tr></table></figure><h3 id=\"23请求头相关的api\"><a class=\"anchor\" href=\"#23请求头相关的api\">#</a> 2.3 请求头相关的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> headName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过键取值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 请求头中键名字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 是否还有下一个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">E</span> <span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到某个元素，并且指针后移一位</span></pre></td></tr></table></figure><blockquote>\n<blockquote>\n<p>[!NOTE]</p>\n<p>hasMoreElements () 可以与 nextElement () 搭配使用，例如</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> headerNames <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 此时对 headerNames 进行遍历，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取到请求头中的所有键值对</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 指针直接指向下一行，可以理解为指针在初始时指向的是 - 1，判断下一位不为空时才指针才会下移取值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name <span class=\"token operator\">=</span> headerNames<span class=\"token punctuation\">.</span><span class=\"token function\">nextElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    value <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n</blockquote>\n<h3 id=\"24请求参数的相关api\"><a class=\"anchor\" href=\"#24请求参数的相关api\">#</a> 2.4 请求参数的相关 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过参数名称取值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getParameterValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有同名参数值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Enumeration</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有参数的键名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有参数的键值对</span></pre></td></tr></table></figure><h2 id=\"3请求相关的方法\"><a class=\"anchor\" href=\"#3请求相关的方法\">#</a> 3. 请求相关的方法</h2>\n<h3 id=\"31作用域的介绍\"><a class=\"anchor\" href=\"#31作用域的介绍\">#</a> 3.1 作用域的介绍</h3>\n<p>​\t作用域是不同的 Servlet 之间的数据共享区，存放于数据库的内存中。</p>\n<p>​\t主要分为四个：页面域（Page）、请求域（Request）、会话域（Session）、上下文域（ServletContext）</p>\n<blockquote>\n<p>[!WARNING]</p>\n<p>数据只能在同一个请求中共享，请求结束或其它的请求不能访问其中的数据。</p>\n</blockquote>\n<h3 id=\"32相关的api\"><a class=\"anchor\" href=\"#32相关的api\">#</a> 3.2 相关的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Object</span> <span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"33请求分发的api\"><a class=\"anchor\" href=\"#33请求分发的api\">#</a> 3.3 请求分发的 API</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将请求跳转到分发器指定的地方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 收集分发器指定的请求的响应结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4转发-and-重定向\"><a class=\"anchor\" href=\"#4转发-and-重定向\">#</a> 4. 转发 And 重定向</h2>\n<h3 id=\"41转发\"><a class=\"anchor\" href=\"#41转发\">#</a> 4.1 转发</h3>\n<p>​\t由<strong>服务器</strong>进行的页面跳转</p>\n<h4 id=\"411相关的api\"><a class=\"anchor\" href=\"#411相关的api\">#</a> <strong>4.1.1 相关的 API</strong></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"412特点\"><a class=\"anchor\" href=\"#412特点\">#</a> <strong>4.1.2 特点</strong></h4>\n<ul>\n<li>服务器的内部行为，URL 始终不变</li>\n<li>客户端只发送了一次请求</li>\n<li>请求域的数据不会失效</li>\n<li>URI 不需要添上项目名</li>\n</ul>\n<h3 id=\"42重定向\"><a class=\"anchor\" href=\"#42重定向\">#</a> 4.2 重定向</h3>\n<p>​\t<strong>客户端</strong>根据服务器反馈的信息<strong>再次请求</strong>服务器</p>\n<h4 id=\"421相关的api\"><a class=\"anchor\" href=\"#421相关的api\">#</a> <strong>4.2.1 相关的 API</strong></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"422特点\"><a class=\"anchor\" href=\"#422特点\">#</a> <strong>4.2.2 特点</strong></h4>\n<ul>\n<li>由于是再次请求，所以地址栏会发生变化</li>\n<li>客户端两次请求了数据</li>\n<li>请求域中数据丢失</li>\n<li>URL 是完整的项目名，当然也可以是外部链接</li>\n</ul>\n<blockquote>\n<p>[!TIP]</p>\n<p>如果不想丢失数据域中的信息的话，可以用转发哦</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/17/Http%E5%8D%8F%E8%AE%AE%E4%B8%8ERequest/",
            "url": "https://zhiyuan-porg.github.io/2024/07/17/Http%E5%8D%8F%E8%AE%AE%E4%B8%8ERequest/",
            "title": "Http协议与Request",
            "date_published": "2024-07-17T02:13:03.187Z",
            "content_html": "<h1 id=\"http协议与request\"><a class=\"anchor\" href=\"#http协议与request\">#</a> Http 协议与 Request</h1>\n<h3 id=\"http概述\"><a class=\"anchor\" href=\"#http概述\">#</a> Http 概述</h3>\n<h5 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h5>\n<p>HTTP（Hyper　Text　Transｆｅｒ　Ｐｒｏｔｏｃｏｌ超文本传输协议） 应用层协议，运行在ＴＣＰ传输层协议之上，作用是指定传输格式，且通信双方都要遵守。</p>\n<blockquote>\n<p>Tip：HTTP 协议的默认端口是８０哦</p>\n</blockquote>\n<h5 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h5>\n<p>由请求报文和响应报文组成；无状态协议，不记录用户访问状态。</p>\n<h5 id=\"组成\"><a class=\"anchor\" href=\"#组成\">#</a> 组成</h5>\n<p>请求行、请求头、请求体</p>\n<p><strong>请求行：</strong>      包括请求的方式（GET、POST、PUT、DELETE 等）、地址（URL）以及协议的版本</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">POST 方式</th>\n<th style=\"text-align:center\">GET 方式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">地址栏</td>\n<td style=\"text-align:center\">参数不会在地址栏显示出来</td>\n<td style=\"text-align:center\">参数会拼接在请求的 URL 后面，以查询字符方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">大小</td>\n<td style=\"text-align:center\">理论上无大小限制，使用流的方式发送数据</td>\n<td style=\"text-align:center\">受浏览器限制，通常是１K</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">安全性</td>\n<td style=\"text-align:center\">在请求体中发送，参数不外显，安全性相对来说较高</td>\n<td style=\"text-align:center\">在请求行中发送，参数外显，安全性较低</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">缓存</td>\n<td style=\"text-align:center\">不使用缓存</td>\n<td style=\"text-align:center\">可能会使用缓存访问静态资源，使用时状态码是３０４</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求头：</strong></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n",
            "tags": []
        },
        {
            "id": "https://zhiyuan-porg.github.io/2024/07/16/hello-world/",
            "url": "https://zhiyuan-porg.github.io/2024/07/16/hello-world/",
            "title": "Hello World",
            "date_published": "2024-07-15T16:03:55.730Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}