<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>只想摆烂，阿巴阿巴阿巴</title>
        <subtitle></subtitle>
        <icon>https://zhiyuan-porg.github.io/assets/favicon.ico</icon>
        <link>https://zhiyuan-porg.github.io</link>
        <author>
          <name>SanYue</name>
        </author>
        <description></description>
        <language>zh-cn</language>
        <pubDate>Wed, 24 Jul 2024 17:26:49 +0800</pubDate>
        <lastBuildDate>Wed, 24 Jul 2024 17:26:49 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/24/Listener%E3%80%81Ajax%E3%80%81JSON/</guid>
            <title></title>
            <link>https://zhiyuan-porg.github.io/2024/07/24/Listener%E3%80%81Ajax%E3%80%81JSON/</link>
            <pubDate>Wed, 24 Jul 2024 17:26:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;listener-ajax-json&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#listener-ajax-json&#34;&gt;#&lt;/a&gt; Listener、Ajax、JSON&lt;/h1&gt;
&lt;h2 id=&#34;1-listener监听器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-listener监听器&#34;&gt;#&lt;/a&gt; 1. Listener 监听器&lt;/h2&gt;
&lt;p&gt;​		在 JavaWeb 中的监听器分为三大类（监听的对象）、八大种（监听的属性）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三大类：&lt;/strong&gt; 监听域对象（域对象的生命周期）、监听属性（值的变化）、 监听 Session 的状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）监听域对象&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;对象类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;监听器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletContext&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletContextListener&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSession&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSessionListener&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpServletRequest&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletRequestListener&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		在使用 HttpSessionListener 监听器或 ServletRequestListener 监听器时，如果是直接关闭服务器来销毁这二者时，并不会触发相应的 Destroyed 方法。（这里有一个很俗的例子，将监听器比作一位工作者，服务器关闭时可以看成是下班，那都下班了还管 der）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;（2）监听属性变化&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;对象类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;监听器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletContext&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletContextAttributeListener&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSession&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSessionAttributeListener&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpServletRequest&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ServletRequestAttributeListener (监听移除)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; 在监听属性的变化时不仅仅是监听值的替换操作，还有添加和移除操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;（3）监听 Session 对象的状态&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;监听器&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSessionBindingListener&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;监听 HttpSession 的绑定与解绑&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HttpSessionActivationListener&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;监听 HttpSession 的钝化与活化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;2ajax&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2ajax&#34;&gt;#&lt;/a&gt; 2.AJAX&lt;/h2&gt;
&lt;p&gt;​		AJAX（Asynchronous Javascript And XML， 异步 JavaScript 和 XML），一种创建交互式网页应用的网页开发技术。实现了异步请求的功能，即可以在不刷新网页的情况下重新渲染页面的内容。在经过长久的发展之后，AJAX 也有比较完善的封装，下文就以 JQuery 框架下的 AJAX 为进行说明。&lt;/p&gt;
&lt;p&gt;​		在 JQuery 框架下的 AJAX 中主要有 GET、POST、AJAX 三种请求方式。如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;请求方式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;语法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GET 请求&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$.get(url, &lt;em&gt;[data]&lt;/em&gt;, &lt;em&gt;[callback]&lt;/em&gt;, &lt;em&gt;[type]&lt;/em&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简单的 get 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;POST 请求&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$.post(url, &lt;em&gt;[data]&lt;/em&gt;, &lt;em&gt;[callback]&lt;/em&gt;, &lt;em&gt;[type]&lt;/em&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简单的 post 请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AJAX 请求&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$.ajax([settings])&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复杂的 ajax 请求（可以设更多的参数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GET 请求&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$.get([settings])&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复杂的 get 请求（可以设更多的参数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;POST 请求&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$.post([settings])&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复杂的 post 请求（可以设更多的参数）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;21get&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21get&#34;&gt;#&lt;/a&gt; 2.1.GET&lt;/h3&gt;
&lt;h3 id=&#34;22post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22post&#34;&gt;#&lt;/a&gt; 2.2.POST&lt;/h3&gt;
&lt;h3 id=&#34;23ajax&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23ajax&#34;&gt;#&lt;/a&gt; 2.3.AJAX&lt;/h3&gt;
&lt;p&gt;​&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/24/Filter/</guid>
            <title></title>
            <link>https://zhiyuan-porg.github.io/2024/07/24/Filter/</link>
            <pubDate>Wed, 24 Jul 2024 10:27:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;filter&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#filter&#34;&gt;#&lt;/a&gt; Filter&lt;/h1&gt;
&lt;h2 id=&#34;1-过滤器简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-过滤器简介&#34;&gt;#&lt;/a&gt; 1. 过滤器简介&lt;/h2&gt;
&lt;h3 id=&#34;11-filter概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-filter概述&#34;&gt;#&lt;/a&gt; 1.1. Filter 概述&lt;/h3&gt;
&lt;p&gt;​	Filter 被称为过滤器，是一段可复用的代码，可以在请求的之前或之后执行。这意味着 Filter 可以管理多个 Web 资源，即在请求的 Web 资源时会先经过过滤器，此时可以进行一些操作（如权限访问控制、过滤敏感词汇等等），而且在访问过 Web 资源后对客户端进行响应时也会经过过滤器，当然，这也可以进行管理操作。&lt;/p&gt;
&lt;p&gt;​	话不多说，上图&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://sanyueqi.cn-gd.ufileos.com/blogContentImgs/Filter_01.png&#34; alt=&#34;image-20240724105513406&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-filter的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-filter的使用&#34;&gt;#&lt;/a&gt; 1.2. Filter 的使用&lt;/h3&gt;
&lt;h4 id=&#34;121-filter的生命周期&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121-filter的生命周期&#34;&gt;#&lt;/a&gt; 1.2.1. Filter 的生命周期&lt;/h4&gt;
&lt;p&gt;​	Filter 的生命周期有创建和销毁。其中，创建的时机是在&lt;strong&gt;服务器启动&lt;/strong&gt;时，而且在整个服务器运行期间&lt;strong&gt;只会创建一次&lt;/strong&gt; Filter 实例； 而销毁的时机是在&lt;strong&gt;服务器关闭&lt;/strong&gt;时。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Filter 生命周期的相关方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用 and 次数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;void init()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始化，在服务器启动就加载，执行 1 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;void doFilter()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;拦截到请求之后执行的核心逻辑方法，执行 N 次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;void destroy()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;销毁，在服务器关闭时，执行 1 次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	&lt;strong&gt;样例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 定义了拦截规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拦截规则有三种：&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//	精确匹配 （e.g./user、/user.jsp）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//	目录匹配 （e.g./user/* 、 /emp/*）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  后缀匹配 （e.g. *action 、 *.html 、*.jsp）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@WebFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DemoCase&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 初始化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; init &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;FilterConfig&lt;/span&gt; filterConfig&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 核心逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; dofilter &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt; servletRequest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletResponse&lt;/span&gt; servletResponse&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FilterChain&lt;/span&gt; filterChain&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletException&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 放行前的管理操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 如果符合条件，则放行请求到下一个过滤器（如果还有的话） or Web 资源 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        filterChain&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dofilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;servletRequest&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; servletResponse&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 放行后的管理操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 销毁&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; destroy &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;warning：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在拦截规则中，目录匹配不可用和后缀匹配一起使用。 e . g .  /aaa/*.action , /* do&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;122-filterconfig类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#122-filterconfig类&#34;&gt;#&lt;/a&gt; 1.2.2. FilterConfig 类&lt;/h4&gt;
&lt;p&gt;​	FilterConfig 配置类，主要用于获取 ServletContext 对象，以及一些其他的 filter 信息。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;相关方法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getFilterName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 获取该 Filter 的名称，默认为该 Filter 类的全路径名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;ServletContext&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getServletContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 获取上下文对象（ServletContext）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInitParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; var1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 获取 Filter 的初始化参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token class-name&#34;&gt;Enumeration&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getInitParameterNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 获取全部 Filter 的初始化参数；&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;123-拦截方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#123-拦截方式&#34;&gt;#&lt;/a&gt; 1.2.3. 拦截方式&lt;/h4&gt;
&lt;p&gt;​	与其说是拦截的方式，不是说是拦截的对象。开发者可以在 @WebFilter 注解中配置 dispatcherTypes 字段的值来对指定对象进行拦截。其中， 可选择的值与含义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;REQUEST&lt;/td&gt;
&lt;td&gt;只拦截来自浏览器发送过来的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FORWARD&lt;/td&gt;
&lt;td&gt;只拦截通过 RequestDispatcher.forward () 发送的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INCLUDE&lt;/td&gt;
&lt;td&gt;只拦截通过 RequestDispatcher.include () 发送的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ERROR&lt;/td&gt;
&lt;td&gt;只拦截由于异常 / 错误触发的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ASYNC&lt;/td&gt;
&lt;td&gt;拦截异步的 Servlet&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拦截的对象默认是 REQUEST&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在拦截 ASYNC 异步的 Servlet 时，Filter 也要开启相关异步支持，并且还要加上对浏览器请求的拦截。e . g .&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@WebFilter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/demo03&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;dispatcherTypes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;DispatcherType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;DispatcherType&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;ASYNC&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;asyncSupported &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;2过滤器链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2过滤器链&#34;&gt;#&lt;/a&gt; 2. 过滤器链&lt;/h3&gt;
&lt;p&gt;​	用户请求 Web 资源时中间经过多个过滤器，每一个过滤器完成一个具体的功能。流程如下，&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://sanyueqi.cn-gd.ufileos.com/blogContentImgs/Filter_02.png&#34; alt=&#34;image-20240724121032396&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;21过滤器链的执行顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21过滤器链的执行顺序&#34;&gt;#&lt;/a&gt; 2.1. 过滤器链的执行顺序&lt;/h4&gt;
&lt;p&gt;​	在注解方式下，过滤器链的执行难顺序是按照类名字母的在字典中的先后顺序执行的。&lt;/p&gt;
&lt;p&gt;​	在 xml 配置文件下，过滤器链的执行顺序与配置项中的先后顺序一致&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/23/JSP-MVC/</guid>
            <title></title>
            <link>https://zhiyuan-porg.github.io/2024/07/23/JSP-MVC/</link>
            <pubDate>Tue, 23 Jul 2024 10:01:03 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;jsp-mvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jsp-mvc&#34;&gt;#&lt;/a&gt; JSP-MVC&lt;/h2&gt;
&lt;h2 id=&#34;1jsp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1jsp&#34;&gt;#&lt;/a&gt; 1.JSP&lt;/h2&gt;
&lt;h3 id=&#34;11html和servelet的弊端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11html和servelet的弊端&#34;&gt;#&lt;/a&gt; 1.1.HTML 和 Servelet 的弊端&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;HTML：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	优点：方便页面的布局及美化&lt;/p&gt;
&lt;p&gt;​	缺点：不能制作动态内容&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Servlet：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	优点：可以制作动态内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;缺点：不方便写CSS和JS代码
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;二者的优缺点刚好互补，两者综合起来就刚刚好是 JSP 的设计思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;12jsp简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12jsp简介&#34;&gt;#&lt;/a&gt; 1.2.JSP 简介&lt;/h3&gt;
&lt;p&gt;​	以 Java 作为脚本语言，部署在网络服务器上，可以根据客户端的请求内容动态生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者。另外，JSP 的标签库 JSTL 提供了类似于 Java 中的 if、switch、for 等功能，开发者可以更方便地实现条件渲染和列表渲染等操作，而且也不受跨平台的限制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**Tips：**JSP 编译器可以将 JSP 文件编译成用 Java 代码写的 Servlet，然后 Servlet 再编译生成字节码文件。JSP 本质上就是一个 Servlet，属于动态技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;13jsp语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13jsp语法&#34;&gt;#&lt;/a&gt; 1.3.JSP 语法&lt;/h3&gt;
&lt;h4 id=&#34;131输出脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#131输出脚本&#34;&gt;#&lt;/a&gt; 1.3.1. 输出脚本&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;作用：&lt;/strong&gt; 直接输出变量值或对表达式进行计算&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;%= 变量名称或表达式%&amp;gt;  // 相当于Servlet的out.print()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;132声明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#132声明&#34;&gt;#&lt;/a&gt; 1.3.2. 声明&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;**作用：** 声明全局变量或方法
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;%! 全局变量或方法 %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;133插入代码片段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#133插入代码片段&#34;&gt;#&lt;/a&gt; 1.3.3. 插入代码片段&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;**作用：** 插入Java代码
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;% Java代码 %&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14jsp九大内置对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14jsp九大内置对象&#34;&gt;#&lt;/a&gt; 1.4.JSP 九大内置对象&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;PageContext:&lt;/strong&gt; 页面域&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Request：&lt;/strong&gt; HttpServletRequest (请求域)&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Session：&lt;/strong&gt; 会话域&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Application：&lt;/strong&gt; 上下文域&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上为四大域对象， 从大到小依次为 Application &amp;gt; Session &amp;gt; Request &amp;gt; PageContext&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用域&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Java 代码&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;EL 的写法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;范围大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;页面域&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;% = pageContext.getAttribute (&amp;quot;键名&amp;quot;) %&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; pageScope.键名=&#34;&#34;&gt;$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;请求域&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;% = request.getAttribute (&amp;quot;键名&amp;quot;) %&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; requestScope.键名=&#34;&#34;&gt;$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;会话域&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;% = session.getAttribute (&amp;quot;键名&amp;quot;) %&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; sessionScope.键名=&#34;&#34;&gt;$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;上下文域&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;% = application.getAttribute (&amp;quot;键名&amp;quot;) %&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; applicationScope.键名=&#34;&#34;&gt;$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自动查找&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lt;% = pageContext.findAttribute (&amp;quot;键名&amp;quot;) %&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	&lt;strong&gt;Response：&lt;/strong&gt; HttpServletResponse&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Out&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Config：&lt;/strong&gt; ServletConfig&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Page:&lt;/strong&gt; 当前页面的引用，就是 this&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Exception：&lt;/strong&gt; 封装了出现的异常， 只有在错误页面的中才会存在&lt;/p&gt;
&lt;h4 id=&#34;141pagecontext域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#141pagecontext域&#34;&gt;#&lt;/a&gt; 1.4.1PageContext 域&lt;/h4&gt;
&lt;p&gt;​	PageContext 域是 servlet 中 4 个域对象中最后一个了，而且大小也是&lt;strong&gt;最小的&lt;/strong&gt;，只在当前页面下生效，且在不同的页面下不能实现页面共享（即使是一次请求）&lt;/p&gt;
&lt;p&gt;​	有关的方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;void setAttribute(String key, Object value)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;向页面域中添加键和值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Object getAttribute(String key)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从页面域中得到值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;void removeAttribute(String key)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除页面域中键值对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Object findAttribute(String key)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;自动从四个作用域中去查某个键，从小到大的范围来查找，如果找到就停止。如果没有找到，返回 null，&lt;strong&gt;该方法是页面域独有的&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;142exception对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#142exception对象&#34;&gt;#&lt;/a&gt; 1.4.2Exception 对象&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;Exception 属于 JSP 的九大内置对象，但是只有错误页面才会生成该对象，普通的 JSP 页面不会存在 Exception 对象&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	&lt;strong&gt;warning：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	(1) 当前页面只有设置了 &lt;strong&gt;isErrorPage = true&lt;/strong&gt; 时才可以使用 exception 内置对象&lt;/p&gt;
&lt;p&gt;​	(2) 常规页面只有八大内置对象，只有错误页面才有九大内置对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2el表达式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2el表达式&#34;&gt;#&lt;/a&gt; 2.EL 表达式&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;$&amp;#123; 变量名或表达式&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;21食用说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21食用说明&#34;&gt;#&lt;/a&gt; 2.1. 食用说明&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;变量名：&lt;/strong&gt; 变量名即可以是诸如 x, y, z 这样的普通变量，也可以是 Object、List、Map、数组或者 JavaBean 等&lt;/p&gt;
&lt;blockquote map[xiaoshabi]=&#34;&#34;&gt;
&lt;p&gt;Tips: 键名中如果有特殊字符时，可以使用双引号或者单引号将其引起来。 e.g. $&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	&lt;strong&gt;表达式：&lt;/strong&gt; EL 表达式中的表达式可以包含常规的算术表达式（ + 、 - 、* 、/ 、%）、比较表达式（ == 、 != 、&amp;lt;、&amp;lt;=、&amp;gt; 、&amp;gt;=）、逻辑表达式（&amp;amp;&amp;amp; 、|| 、！）、三元运算以及判空表达式（${ empty 变量名}）&lt;/p&gt;
&lt;h2 id=&#34;3jstl标签库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3jstl标签库&#34;&gt;#&lt;/a&gt; 3.JSTL 标签库&lt;/h2&gt;
&lt;p&gt;​	使用时先导入 jar 包&lt;/p&gt;
&lt;h3 id=&#34;31相关标签&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31相关标签&#34;&gt;#&lt;/a&gt; 3.1 相关标签&lt;/h3&gt;
&lt;p&gt;**&amp;lt;c:if test=&amp;quot;条件判断表达式&amp;quot;&amp;gt; ** 条件判断&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;c:choose&amp;gt;&lt;/strong&gt; 多分支判断&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;类似于 switch，层级结构为：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;c:choose&amp;gt;
    &amp;lt;c:when test = &amp;quot;条件表达式&amp;quot;&amp;gt;
   	 	xxxxxxxx
    &amp;lt;/c:when&amp;gt;
    //默认条件，相当于default
    &amp;lt;c:otherwise&amp;gt;
        xxxxxxx
    &amp;lt;/c:otherwise&amp;gt;
&amp;lt;/c:choose
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;c:forEach&amp;gt;&lt;/strong&gt; 循环渲染&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;类似于 for 语句，相关的参数有&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;属性名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;EL 支持&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;items&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数组或集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;var&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;varStatus&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;begin&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;end&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;step&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中&lt;strong&gt; varStatus&lt;/strong&gt; 还有一些子属性（虽然也不是很常用）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;属性&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据类型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;index&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前元素的索引号，从 0 开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;count&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;遍历到当前位置，一共遍历了多少个元素（默认从 1 开始）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;first&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果当前遍历的是第 1 个元素，则返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;last&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;boolean&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果当前遍历的是最后 1 个元素，则返回 true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;4三层架构-and-mvc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4三层架构-and-mvc&#34;&gt;#&lt;/a&gt; 4. 三层架构 And MVC&lt;/h2&gt;
&lt;h3 id=&#34;41三层架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41三层架构&#34;&gt;#&lt;/a&gt; 4.1. 三层架构&lt;/h3&gt;
&lt;p&gt;​	三层架构分为控制层（Controller 层）、业务层（Service 层）、持久层（Dao 层）&lt;/p&gt;
&lt;h4 id=&#34;411controller层表现层-web层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#411controller层表现层-web层&#34;&gt;#&lt;/a&gt; 4.1.1.Controller 层（表现层、Web 层）&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;主要完成的操作：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	（1）接收前端传递的参数&lt;/p&gt;
&lt;p&gt;​	（2）调用业务层&lt;/p&gt;
&lt;p&gt;​	（3）请求响应&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另外，还会有如下需求：&lt;/p&gt;
&lt;p&gt;数据的中转处理（进行格式化等操作）、响应类型和响应数据的格式及编码、数据压缩....&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/18/Cookie%20And%20Seeion/</guid>
            <title></title>
            <link>https://zhiyuan-porg.github.io/2024/07/18/Cookie%20And%20Seeion/</link>
            <pubDate>Thu, 18 Jul 2024 17:53:23 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1cookie&#34;&gt;#&lt;/a&gt; 1.Cookie&lt;/h2&gt;
&lt;h3 id=&#34;11概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11概述&#34;&gt;#&lt;/a&gt; 1.1 概述&lt;/h3&gt;
&lt;h4 id=&#34;111协议状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111协议状态&#34;&gt;#&lt;/a&gt; 1.1.1 协议状态&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;分类：&lt;/strong&gt; 有状态、无状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; 协议状态的划分是以是否有数据存储功能来划分的，但这并不一定是绝对的。例如 Http 协议是无状态协议，但通过一些特殊手段可以使其携带数据（加入 cookie、session 并向其中写入相应的数据，此时 Http 协议也具有了数据存储功能了）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;112cookie的传递流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112cookie的传递流程&#34;&gt;#&lt;/a&gt; 1.1.2Cookie 的传递流程&lt;/h4&gt;
&lt;h3 id=&#34;12cookie的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12cookie的操作&#34;&gt;#&lt;/a&gt; 1.2Cookie 的操作&lt;/h3&gt;
&lt;p&gt;​	cookie 的操作无非就是创建、删除、查看&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建 Cookie 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt; user &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;user&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;dashabi&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置 Cookie 的有效时间，单位为秒。如果没有设置过期时间则 Cookie 会随着浏览器的关闭而消失；当设置了过期时间时，则失效的时间以过期时间为准&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 如果要删除此条 Cookie，则可以  user.setMaxAge (0), 表示 Cookie 的存活时间为零&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setMaxAge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在响应报文中添加 Cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addCookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/17/Response%20And%20ServletContext/</guid>
            <title>Response And ServletContext</title>
            <link>https://zhiyuan-porg.github.io/2024/07/17/Response%20And%20ServletContext/</link>
            <pubDate>Wed, 17 Jul 2024 17:49:03 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;1http响应概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1http响应概述&#34;&gt;#&lt;/a&gt; 1.Http 响应概述&lt;/h2&gt;
&lt;h3 id=&#34;11http响应信息的组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11http响应信息的组成&#34;&gt;#&lt;/a&gt; 1.1HTTP 响应信息的组成&lt;/h3&gt;
&lt;p&gt;响应行、响应头、响应体&lt;/p&gt;
&lt;h3 id=&#34;12响应行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12响应行&#34;&gt;#&lt;/a&gt; 1.2 响应行&lt;/h3&gt;
&lt;p&gt;由协议及版本、响应状态码、状态信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;e.g. HTTP/1.1    200    ok&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;121响应状态码分为五类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#121响应状态码分为五类&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.2.1 响应状态码分为五类&lt;/strong&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;状态码&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指示信息；表示请求已接收，继续处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;成功；&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;重定向&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;客户端错误；语法错误 or 无法实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;服务端错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;122响应头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#122响应头&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.2.2 响应头&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;由各种键值组成，键固定值可变。常见的响应头如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;响应头信息&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;重定向要跳转的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;设置数据类型及字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Refresh&lt;/td&gt;
&lt;td&gt;设置稍后跳转的延迟时间及页面路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Disposition&lt;/td&gt;
&lt;td&gt;设置内容的处理方式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;常见的状态码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;200：正确得到响应数据&lt;/p&gt;
&lt;p&gt;302：页面重定向&lt;/p&gt;
&lt;p&gt;304：使用了本地缓存&lt;/p&gt;
&lt;p&gt;400：请求参数错误&lt;/p&gt;
&lt;p&gt;404：资源不存在&lt;/p&gt;
&lt;p&gt;405：请求的方法错误&lt;/p&gt;
&lt;p&gt;415： 无法处理的媒体格式&lt;/p&gt;
&lt;p&gt;500： 服务器内部错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;123-响应体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#123-响应体&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1.2.3 响应体&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;封装服务器要返回的数据，而且可以是任意数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Get 请求虽然没有请求体，但它有响应体&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2httpservletrequest对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2httpservletrequest对象&#34;&gt;#&lt;/a&gt; 2.HttpServletRequest 对象&lt;/h2&gt;
&lt;h3 id=&#34;21简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21简介&#34;&gt;#&lt;/a&gt; 2.1 简介&lt;/h3&gt;
&lt;p&gt;​	HttpServletReruest 是 ServletRequest 接口的子接口，代表着一个请求对象，用来封装所有从浏览器发送给服务器的数据&lt;/p&gt;
&lt;h3 id=&#34;22请求行相关的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22请求行相关的api&#34;&gt;#&lt;/a&gt; 2.2 请求行相关的 API&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getRequestURI&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;StringBuffer&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getRequestURL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getProtocol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 得到请求行中协议的版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getContextPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 得到项目的访问地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getRemoteAddr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 得到客户端的 IP 地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getServletPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 得到 servlet 的访问地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;23请求头相关的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23请求头相关的api&#34;&gt;#&lt;/a&gt; 2.3 请求头相关的 API&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getHeader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; headName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 通过键取值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Enumeration&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getHeaderNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 请求头中键名字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hasMoreElements&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 是否还有下一个元素&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;E&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;nextElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 得到某个元素，并且指针后移一位&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;hasMoreElements () 可以与 nextElement () 搭配使用，例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enumeration&amp;lt;String&amp;gt; headerNames = request.getHeaderNames();&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;// 此时对 headerNames 进行遍历，&lt;br /&gt;
String name;&lt;br /&gt;
String value;&lt;br /&gt;
while(headerNames.hasMoreElements()){&lt;br /&gt;
// 获取到请求头中的所有键值对&lt;br /&gt;
 // 指针直接指向下一行，可以理解为指针在初始时指向的是 - 1，判断下一位不为空时才指针才会下移取值&lt;br /&gt;
 name = headerNames.nextElements ();&lt;br /&gt;
value = request.getHeader(name);&lt;br /&gt;
}&lt;br /&gt;
```&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;24请求参数的相关api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24请求参数的相关api&#34;&gt;#&lt;/a&gt; 2.4 请求参数的相关 API&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getParameter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 通过参数名称取值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getParameterValues&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 得到所有同名参数值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Enumeration&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getParameterNames&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 得到所有参数的键名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getParameterMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 得到所有参数的键值对&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;3请求相关的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3请求相关的方法&#34;&gt;#&lt;/a&gt; 3. 请求相关的方法&lt;/h2&gt;
&lt;h3 id=&#34;31作用域的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31作用域的介绍&#34;&gt;#&lt;/a&gt; 3.1 作用域的介绍&lt;/h3&gt;
&lt;p&gt;​	作用域是不同的 Servlet 之间的数据共享区，存放于数据库的内存中。&lt;/p&gt;
&lt;p&gt;​	主要分为四个：页面域（Page）、请求域（Request）、会话域（Session）、上下文域（ServletContext）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据只能在同一个请求中共享，请求结束或其它的请求不能访问其中的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32相关的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32相关的api&#34;&gt;#&lt;/a&gt; 3.2 相关的 API&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;removeAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;33请求分发的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33请求分发的api&#34;&gt;#&lt;/a&gt; 3.3 请求分发的 API&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 将请求跳转到分发器指定的地方&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletResponse&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 收集分发器指定的请求的响应结果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;ServletRequest&lt;/span&gt; request&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ServletResponse&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;4转发-and-重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4转发-and-重定向&#34;&gt;#&lt;/a&gt; 4. 转发 And 重定向&lt;/h2&gt;
&lt;h3 id=&#34;41转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41转发&#34;&gt;#&lt;/a&gt; 4.1 转发&lt;/h3&gt;
&lt;p&gt;​	由&lt;strong&gt;服务器&lt;/strong&gt;进行的页面跳转&lt;/p&gt;
&lt;h4 id=&#34;411相关的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#411相关的api&#34;&gt;#&lt;/a&gt; &lt;strong&gt;4.1.1 相关的 API&lt;/strong&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRequestDispatcher&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;412特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#412特点&#34;&gt;#&lt;/a&gt; &lt;strong&gt;4.1.2 特点&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;服务器的内部行为，URL 始终不变&lt;/li&gt;
&lt;li&gt;客户端只发送了一次请求&lt;/li&gt;
&lt;li&gt;请求域的数据不会失效&lt;/li&gt;
&lt;li&gt;URI 不需要添上项目名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42重定向&#34;&gt;#&lt;/a&gt; 4.2 重定向&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;客户端&lt;/strong&gt;根据服务器反馈的信息&lt;strong&gt;再次请求&lt;/strong&gt;服务器&lt;/p&gt;
&lt;h4 id=&#34;421相关的api&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#421相关的api&#34;&gt;#&lt;/a&gt; &lt;strong&gt;4.2.1 相关的 API&lt;/strong&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sendRedirect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;422特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#422特点&#34;&gt;#&lt;/a&gt; &lt;strong&gt;4.2.2 特点&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;由于是再次请求，所以地址栏会发生变化&lt;/li&gt;
&lt;li&gt;客户端两次请求了数据&lt;/li&gt;
&lt;li&gt;请求域中数据丢失&lt;/li&gt;
&lt;li&gt;URL 是完整的项目名，当然也可以是外部链接&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]&lt;/p&gt;
&lt;p&gt;如果不想丢失数据域中的信息的话，可以用转发哦&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/17/Http%E5%8D%8F%E8%AE%AE%E4%B8%8ERequest/</guid>
            <title>Http协议与Request</title>
            <link>https://zhiyuan-porg.github.io/2024/07/17/Http%E5%8D%8F%E8%AE%AE%E4%B8%8ERequest/</link>
            <pubDate>Wed, 17 Jul 2024 10:13:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;http协议与request&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http协议与request&#34;&gt;#&lt;/a&gt; Http 协议与 Request&lt;/h1&gt;
&lt;h3 id=&#34;http概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#http概述&#34;&gt;#&lt;/a&gt; Http 概述&lt;/h3&gt;
&lt;h5 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h5&gt;
&lt;p&gt;HTTP（Hyper　Text　Transｆｅｒ　Ｐｒｏｔｏｃｏｌ超文本传输协议） 应用层协议，运行在ＴＣＰ传输层协议之上，作用是指定传输格式，且通信双方都要遵守。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tip：HTTP 协议的默认端口是８０哦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#特点&#34;&gt;#&lt;/a&gt; 特点&lt;/h5&gt;
&lt;p&gt;由请求报文和响应报文组成；无状态协议，不记录用户访问状态。&lt;/p&gt;
&lt;h5 id=&#34;组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组成&#34;&gt;#&lt;/a&gt; 组成&lt;/h5&gt;
&lt;p&gt;请求行、请求头、请求体&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求行：&lt;/strong&gt;      包括请求的方式（GET、POST、PUT、DELETE 等）、地址（URL）以及协议的版本&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;POST 方式&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;GET 方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;地址栏&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;参数不会在地址栏显示出来&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;参数会拼接在请求的 URL 后面，以查询字符方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大小&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;理论上无大小限制，使用流的方式发送数据&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;受浏览器限制，通常是１K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;安全性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在请求体中发送，参数不外显，安全性相对来说较高&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;在请求行中发送，参数外显，安全性较低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;缓存&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不使用缓存&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可能会使用缓存访问静态资源，使用时状态码是３０４&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;请求头：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zhiyuan-porg.github.io/2024/07/16/hello-world/</guid>
            <title>Hello World</title>
            <link>https://zhiyuan-porg.github.io/2024/07/16/hello-world/</link>
            <pubDate>Tue, 16 Jul 2024 00:03:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
